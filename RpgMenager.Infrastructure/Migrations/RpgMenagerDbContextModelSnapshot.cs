// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RpgMenager.Infrastructure.Persistence;

#nullable disable

namespace RpgMenager.Infrastructure.Migrations
{
    [DbContext(typeof(RpgMenagerDbContext))]
    partial class RpgMenagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RpgMenager.Domain.Entities.Abstract.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("EncodedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Character");

                    b.HasDiscriminator().HasValue("Character");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.IndexOfItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncodedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("IndexsOfItems");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.IndexOfStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncodedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("IndexsOfStatistic");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Charges")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncodedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ListId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncodedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncodedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ListId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<string>("statisticsEnum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.NPC", b =>
                {
                    b.HasBaseType("RpgMenager.Domain.Entities.Abstract.Character");

                    b.Property<string>("AttitudeToAnotherCharacter")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("NPC");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.PC", b =>
                {
                    b.HasBaseType("RpgMenager.Domain.Entities.Abstract.Character");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasIndex("PlayerId");

                    b.HasDiscriminator().HasValue("PC");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.IndexOfItem", b =>
                {
                    b.HasOne("RpgMenager.Domain.Entities.Abstract.Character", "Character")
                        .WithMany("ListOfIndexItem")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RpgMenager.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.IndexOfStatistic", b =>
                {
                    b.HasOne("RpgMenager.Domain.Entities.Abstract.Character", "Character")
                        .WithMany("ListOfIndexStats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RpgMenager.Domain.Entities.Item", "Item")
                        .WithMany("ListOfIndexStats")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.Item", b =>
                {
                    b.HasOne("RpgMenager.Domain.Entities.IndexOfItem", "IndexOfItems")
                        .WithMany("MainList")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IndexOfItems");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.Statistic", b =>
                {
                    b.HasOne("RpgMenager.Domain.Entities.IndexOfStatistic", "IndexOfStatistic")
                        .WithMany("MainList")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IndexOfStatistic");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.PC", b =>
                {
                    b.HasOne("RpgMenager.Domain.Entities.Player", "Player")
                        .WithMany("PlayerCharacters")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.Abstract.Character", b =>
                {
                    b.Navigation("ListOfIndexItem");

                    b.Navigation("ListOfIndexStats");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.IndexOfItem", b =>
                {
                    b.Navigation("MainList");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.IndexOfStatistic", b =>
                {
                    b.Navigation("MainList");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.Item", b =>
                {
                    b.Navigation("ListOfIndexStats");
                });

            modelBuilder.Entity("RpgMenager.Domain.Entities.Player", b =>
                {
                    b.Navigation("PlayerCharacters");
                });
#pragma warning restore 612, 618
        }
    }
}
